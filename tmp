  private void setupXmlEncrypt() {
        if (!Settings.getRootAccess()) {
            enXmlM_en.setEnabled(false);
        }
        enXmlM_rg.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(RadioGroup radioGroup, int i) {
                switch (i) {
                    case R.id.xml_encrypt_rb_need_sn:
                        enXmlM_arg.setVisibility(View.VISIBLE);
                        break;
                    case R.id.xml_encrypt_rb_noneed_sn:
                        enXmlM_arg.setVisibility(View.GONE);
                        break;
                }
            }
        });
        enXmlM_key_random.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                enXmlM_key.setText(RandomUtils.getAlphaNumericString(16));
            }
        });
        enXmlM_en.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // 16 length key is necessary
                if (enXmlM_key.getText().toString().length()<16){
                    enXmlM_log.append("Key must length 16 or longer\n");
                    return;
                }
                //do en xml
                if (enXmlM_path.getText().toString().isEmpty()) {
                    enXmlM_log.append("Path is must\n");
                    return;
                }
                String path=enXmlM_path.getText().toString();
                String key = enXmlM_key.getText().toString();

                Log.d(TAG.XML_MANAGER_TAG, "d1");
                boolean sn_isChecked=enXmlM_NeedSn.isChecked();
                String sn=enXmlM_arg.getText().toString();
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        String en_xml="";
                        String orig_xml=FileUtils.forceReadFileWithRoot(getActivity(),path);
                        Log.d(TAG.XML_MANAGER_TAG, "d2");
                        if (orig_xml.isEmpty()) {
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    enXmlM_log.append("Error read xml");
                                }
                            });

                            return;
                        }
                        //no need sn
                        if (!sn_isChecked){
                            en_xml=XmlProcessor.encryptXml(orig_xml
                                    ,
                                    key,
                                    0,""
                            );
                            Log.d(TAG.XML_MANAGER_TAG, "d3");
                        }else{
                            //need sn

                            if (sn.isEmpty()) {
                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        enXmlM_log.append("Please enter sn\n");
                                    }
                                });

                                return;
                            }
                            en_xml = XmlProcessor.encryptXml(orig_xml, key, 1, sn);
                            Log.d(TAG.XML_MANAGER_TAG, "d4");
                        }
                        if (en_xml == null || en_xml.isEmpty()) {
                            getActivity().runOnUiThread(new Runnable() {
                                @Override
                                public void run() {
                                    enXmlM_log.append("Error encrypt xml\n");
                                }
                            });

                            return;
                        }

                        String new_path = path.replaceAll(".xml", ".enXmlM");

                        FileUtils.forceWriteToFileWithRoot(getActivity(), en_xml, new_path, new FileForceWriteListener() {
                            @Override
                            public void onWriteFailed(String resaon) {
                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        enXmlM_en.setEnabled(true);
                                        enXmlM_log.append("Failed:"+resaon+"\n");
                                    }
                                });
                            }

                            @Override
                            public void onWriteSuccess() {
                                getActivity().runOnUiThread(new Runnable() {
                                    @Override
                                    public void run() {
                                        enXmlM_en.setEnabled(true);
                                        enXmlM_log.append("Success:"+new_path+"\n");
                                        enXmlM_log.append("WARNING:Your key is updated to clipboard!!! You are now must share this updated key!!!\n");
                                        if (sn_isChecked) {
                                            ClipboardUtil.copyToClipboard(getContext(),"1"+key);
                                            return;
                                        }
                                        ClipboardUtil.copyToClipboard(getContext(),"0"+key);

                                    }
                                });
                            }
                        });
                    }
                }).start();

            }
        });
        enXmlM_openfile_bt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //如果没有权限会自动申请权限
                PathSelector.build(getActivity(), MConstants.BUILD_DIALOG)//Dialog构建方式
                        .setSelectFileTypes("xml")
                        .setShowFileTypes("xml","enXmlM")
                        .setRadio()
                        .setTitlebarMainTitle(new FontBean("Choose Xml"))
                        .setAlwaysShowHandleFragment(false)
                        .setFileItemListener(//设置文件item点击回调(点击是文件才会回调,如果点击是文件夹则不会)
                                new FileItemListener() {
                                    @Override
                                    public boolean onClick(View v, FileBean file, String currentPath, BasePathSelectFragment pathSelectFragment) {
                                        Mtools.toast(file.getPath());
                                        enXmlM_path.setText(file.getPath());
                                        pathSelectFragment.close();
                                        return false;
                                    }
                                }
                        )
                        .show();//开始构建
            }
        });
    }